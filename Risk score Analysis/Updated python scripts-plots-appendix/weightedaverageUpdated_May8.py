# -*- coding: utf-8 -*-
"""WeightedAverage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kV_eBdQBP-P7WMxaC6bVd6KaUCo2pJgi

# Data import and Cleaning Android all CVEs
"""

# importing libraries

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import os
import seaborn as sns

import warnings

"""# Android 10"""

from google.colab import drive
drive.mount('/content/drive/')

# import data
df_location = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/Android_10.csv"
df = pd.read_csv(df_location)

df.head(3)

df['CVSS_Severity'].str.split('\n').str[0]



# Split the string on '\n' and select the first element
df2 = df.copy()
df2['cvss_v3'] = df2['CVSS_Severity'].str.split('\n').str[0]

# Split the string on ' ' and select the appropriate elements
#df[['Version', 'Value', 'Severity']] = df['column_name'].str.split(' ', expand=True)

df2.head()

# Split the string on ' ' and select the appropriate elements
df2[['Version', 'Value', 'Severity']] = df2['cvss_v3'].str.split(' ', expand=True)

df2.head()

df_new = df2[['Vuln_ID','Value', 'Severity']]

df_new10 = df_new

df_new.isna().sum()

import seaborn as sns
import matplotlib.pyplot as plt

ds = df_new.groupby('Severity').size().sort_values(ascending=False)
ds

import matplotlib.pyplot as plt
import numpy as np

import seaborn as sns

sns.set_style("whitegrid")
# Define x and y data
x = ["Low", "Medium", "High", "Critical"]
y = [27, 412, 456, 52]

# Create bar chart
fig, ax = plt.subplots(figsize=(6, 5))
bars = ax.bar(x, y, color=["green", "blue", "maroon", "red"], width=0.8)

# Add percentage values to each bar
total = float(sum(y))
for bar in bars:
    height = bar.get_height()
    percentage = '{:.1f}%'.format(100 * height / total)
    ax.annotate(percentage, xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')

# Set plot title and axis labels
plt.title("CVSS distribution in Android 10 OS (947 CVEs)")
plt.xlabel("Severity level", fontsize=14)
plt.ylabel("Count", fontsize=14)

# Increase size of xtick and ytick labels
ax.tick_params(axis='x', labelsize=14)
ax.tick_params(axis='y', labelsize=14)

# Show the plot
plt.show()





"""# Android 11"""

# import data
df_location_11 = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/Android_11.csv"
df_11 = pd.read_csv(df_location_11)

df_11.head(3)

df_11.columns

# Split the string on '\n' and select the first element
df2_11 = df_11.copy()
df2_11['cvss_v3'] = df2_11['CVSS Severity'].str.split('\n').str[0]
df2_11[['Version', 'Value', 'Severity']] = df2_11['cvss_v3'].str.split(' ', expand=True)

df_new11 = df2_11[['Vuln ID','Value', 'Severity']]

len(df_new11)

ds2 = df_new11.groupby('Severity').size().sort_values(ascending=False)
ds2

import matplotlib.pyplot as plt
import numpy as np

# Define x and y data
x = ["Low", "Medium", "High", "Critical"]
y = [22, 329, 328, 27]

# Create bar chart
fig, ax = plt.subplots(figsize=(6, 5))
bars = ax.bar(x, y, color=["green", "blue", "maroon", "red"], width=0.8)

# Add percentage values to each bar
total = float(sum(y))
for bar in bars:
    height = bar.get_height()
    percentage = '{:.1f}%'.format(100 * height / total)
    ax.annotate(percentage, xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')

# Set plot title and axis labels
plt.title("CVSS distribution in Android 11 OS (707 CVEs)")
plt.xlabel("Severity level", fontsize=14)
plt.ylabel("Count", fontsize=14)

# Increase size of xtick and ytick labels
ax.tick_params(axis='x', labelsize=14)
ax.tick_params(axis='y', labelsize=14)

# Show the plot
plt.show()



"""# Android 12"""

# import data
df_location_12 = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/Android_12.csv"
df_12 = pd.read_csv(df_location_12)

len(df_12)

df_12.head(3)

# Split the string on '\n' and select the first element
df2_12 = df_12.copy()
df2_12['cvss_v3'] = df2_12['CVSS_Severity'].str.split('\n').str[0]
df2_12[['Version', 'Value', 'Severity']] = df2_12['cvss_v3'].str.split(' ', expand=True)

df_new12 = df2_12[['Vuln_ID','Value', 'Severity']]

ds3 = df_new12.groupby('Severity').size().sort_values(ascending=False)
ds3

import matplotlib.pyplot as plt
import numpy as np

# Define x and y data
x = ["Low", "Medium", "High", "Critical"]
y = [31, 121, 175, 18]

# Create bar chart
fig, ax = plt.subplots(figsize=(6, 5))
bars = ax.bar(x, y, color=["green", "blue", "maroon", "red"], width=0.8)

# Add percentage values to each bar
total = float(sum(y))
for bar in bars:
    height = bar.get_height()
    percentage = '{:.1f}%'.format(100 * height / total)
    ax.annotate(percentage, xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')

# Set plot title and axis labels
plt.title("CVSS distribution in Android 12 OS (345 CVEs)")
plt.xlabel("Severity level", fontsize=14)
plt.ylabel("Count", fontsize=14)

# Increase size of xtick and ytick labels
ax.tick_params(axis='x', labelsize=14)
ax.tick_params(axis='y', labelsize=14)

# Show the plot
plt.show()

"""# Android 13"""

# import data
df_location_13 = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/Android_13.csv"
df_13 = pd.read_csv(df_location_13)

len(df_13)

# Split the string on '\n' and select the first element
df2_13 = df_13.copy()
df2_13['cvss_v3'] = df2_13['CVSS_Severity'].str.split('\n').str[0]
df2_13[['Version', 'Value', 'Severity']] = df2_13['cvss_v3'].str.split(' ', expand=True)

df_new13 = df2_13[['Vuln_ID','Value', 'Severity']]

ds4 = df_new13.groupby('Severity').size().sort_values(ascending=False)
ds4

import matplotlib.pyplot as plt
import numpy as np

# Define x and y data
x = ["Low", "Medium", "High", "Critical"]
y = [44, 160, 127, 7]

# Create bar chart
fig, ax = plt.subplots(figsize=(6, 5))
bars = ax.bar(x, y, color=["green", "blue", "maroon", "red"], width=0.8)

# Add percentage values to each bar
total = float(sum(y))
for bar in bars:
    height = bar.get_height()
    percentage = '{:.1f}%'.format(100 * height / total)
    ax.annotate(percentage, xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')

# Set plot title and axis labels
plt.title("CVSS distribution in Android 13 OS (338 CVEs)")
plt.xlabel("Severity level", fontsize=14)
plt.ylabel("Count", fontsize=14)

# Increase size of xtick and ytick labels
ax.tick_params(axis='x', labelsize=14)
ax.tick_params(axis='y', labelsize=14)

# Show the plot
plt.show()







"""# Distribution of All Android OS Together"""

import matplotlib.pyplot as plt
import numpy as np

# Define the data
x1 = ["Low", "Medium", "High", "Critical"]
y1 = [27, 412, 456, 52]
x2 = ["Low", "Medium", "High", "Critical"]
y2 = [22, 329, 328, 27]
x3 = ["Low", "Medium", "High", "Critical"]
y3 = [31, 121, 175, 18]
x4 = ["Low", "Medium", "High", "Critical"]
y4 = [44, 160, 127, 7]

# Set the bar width
bar_width = 0.2

# Set the positions of the bars on the x-axis
r1 = np.arange(len(x1))
r2 = [x + bar_width for x in r1]
r3 = [x + bar_width*2 for x in r1]
r4 = [x + bar_width*3 for x in r1]

# Create the bar plot
fig, ax = plt.subplots(figsize=(8, 5))
ax.bar(r1, y1, color='blue', width=bar_width, label='Android 10 (CVE=947)')
ax.bar(r2, y2, color='green', width=bar_width, label='Android 11 (CVE=707)')
ax.bar(r3, y3, color='maroon', width=bar_width, label='Android 12 (CVE=345)')
ax.bar(r4, y4, color='gray', width=bar_width, label='Android 13 (CVE=338)')

# Add x-axis labels, y-axis label, and title
ax.set_xlabel('Severity Level', fontweight='bold', fontsize=16)
ax.set_ylabel('Count', fontweight='bold', fontsize=16)
ax.set_title('CVSS distribution of Android OS', fontweight='bold', fontsize=16)

# Increase size of xtick and ytick labels
ax.tick_params(axis='x', labelsize=16)
ax.tick_params(axis='y', labelsize=16)

# Set the x-axis tick marks and labels
ax.set_xticks([r + bar_width*1.5 for r in range(len(x1))])
ax.set_xticklabels(x1)

# Add percentages to the bars
"""
for i, v in enumerate(y1):
    ax.text(i - bar_width/2, v + 20, str(round((v / sum(y1)) * 100, 2)) + "%", color='blue')
for i, v in enumerate(y2):
    ax.text(i + bar_width/2, v + 20, str(round((v / sum(y2)) * 100, 2)) + "%", color='green')
for i, v in enumerate(y3):
    ax.text(i + bar_width*3/2, v + 20, str(round((v / sum(y3)) * 100, 2)) + "%", color='maroon')
for i, v in enumerate(y4):
    ax.text(i + bar_width*5/2, v + 20, str(round((v / sum(y4)) * 100, 2)) + "%", color='gray')

"""

# Add a legend
ax.legend(fontsize=8)

#plt.savefig('01_Android_OS_dist.jpeg')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Define the data
x1 = ["Low", "Medium", "High", "Critical"]
y1 = [27, 412, 456, 52]
x2 = ["Low", "Medium", "High", "Critical"]
y2 = [22, 329, 328, 27]
x3 = ["Low", "Medium", "High", "Critical"]
y3 = [31, 121, 175, 18]
x4 = ["Low", "Medium", "High", "Critical"]
y4 = [44, 160, 127, 7]

# Set the bar width
bar_width = 0.2

# Set the positions of the bars on the x-axis
r1 = np.arange(len(x1))
r2 = [x + bar_width*1 for x in r1]  # Shifted by one bar width
r3 = [x + bar_width*2 for x in r1]  # Shifted by two bar widths
r4 = [x + bar_width*3 for x in r1]  # Shifted by three bar widths

# Create the bar plot
fig, ax = plt.subplots(figsize=(9, 5))
ax.bar(r1, y1, color='blue', width=bar_width, label='Android 10 (CVE=947)')
ax.bar(r2, y2, color='green', width=bar_width, label='Android 11 (CVE=707)')
ax.bar(r3, y3, color='maroon', width=bar_width, label='Android 12 (CVE=345)')
ax.bar(r4, y4, color='gray', width=bar_width, label='Android 13 (CVE=338)')

# Add values to the bars
for i, v in enumerate(y1):
    ax.text(i, v, str(v), ha='center', color='black', fontweight='bold')
for i, v in enumerate(y2):
    ax.text(i + bar_width, v, str(v), ha='center', va='bottom', color='black', fontweight='bold')
for i, v in enumerate(y3):
    ax.text(i + bar_width*2, v, str(v), ha='center', va='bottom', color='black', fontweight='bold')
for i, v in enumerate(y4):
    ax.text(i + bar_width*3, v, str(v), ha='center', va='bottom', color='black', fontweight='bold')

# Add x-axis labels, y-axis label, and title
ax.set_xlabel('Severity Level', fontweight='bold', fontsize=16)
ax.set_ylabel('Count', fontweight='bold', fontsize=16)
ax.set_title('CVSS distribution of Android OS', fontweight='bold', fontsize=16)

# Increase size of xtick and ytick labels and make them bold
ax.tick_params(axis='x', labelsize=14, )
ax.tick_params(axis='y', labelsize=14, )

# Set the x-axis tick marks and labels
ax.set_xticks([r + bar_width*1.5 for r in range(len(x1))])
ax.set_xticklabels(x1, fontweight='bold')

# make the y-axis labels bold
ax.set_yticklabels([0,100,200,300,400], fontweight='bold')




# Add a legend and make it bold
ax.legend(fontsize=14, frameon=False, loc='upper right',  prop={'weight': 'bold'})
plt.savefig('01_Android_OS_dist.jpeg')

# Show the plot
plt.show()







"""# Web Browsers

## Chrome
"""

# import data
df_location_chrome = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/Chrome1.csv"
df_chrome = pd.read_csv(df_location_chrome)

# firefox

len(df_chrome)

# Split the string on '\n' and select the first element
df2_chrome = df_chrome.copy()
df2_chrome['cvss_v3'] = df2_chrome['CVSS_Severity'].str.split('\n').str[0]
df2_chrome[['Version', 'Value', 'Severity']] = df2_chrome['cvss_v3'].str.split(' ', expand=True)

df_new_chrome = df2_chrome[['Vuln_ID','Value', 'Severity']]

ds_1 = df_new_chrome.groupby('Severity').size().sort_values(ascending=False)
ds_1

"""## Firefox"""

# import data
df_location_firefox = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/firefox2b.csv"
df_firefox = pd.read_csv(df_location_firefox)
len(df_firefox)

# Split the string on '\n' and select the first element
df2_firefox = df_firefox.copy()
df2_firefox['cvss_v3'] = df2_firefox['CVSS_Severity'].str.split('\n').str[0]
df2_firefox[['Version', 'Value', 'Severity']] = df2_firefox['cvss_v3'].str.split(' ', expand=True)

df_new_firefox = df2_firefox[['Vuln_ID','Value', 'Severity']]
print(len(df_new_firefox))
ds_2 = df_new_firefox.groupby('Severity').size().sort_values(ascending=False)
ds_2

"""## Opera"""

# import data
df_location_opera = "/content/drive/MyDrive/02 PHD WORLD 2023/CSC 6290 App. Sec HW/CVSS Scores/Opera3b.csv"
df_opera = pd.read_csv(df_location_opera)
len(df_opera)

df_opera

# Split the string on '\n' and select the first element
df2_opera = df_opera.copy()
df2_opera['cvss_v3'] = df2_opera['CVSS_Severity'].str.split('\n').str[0]
df2_opera[['Version', 'Value', 'Severity']] = df2_opera['cvss_v3'].str.split(' ', expand=True)

df_new_opera = df2_opera[['Vuln_ID','Value', 'Severity']]

ds_2 = df_new_opera.groupby('Severity').size().sort_values(ascending=False)
ds_2

print("Chrome:", len(df_new_chrome))
print("Firefox:", len(df_new_firefox))
print("Opera:", len(df_new_opera))



import matplotlib.pyplot as plt
import numpy as np

# Define the data
x1 = ["Low", "Medium", "High", "Critical"]
y1 = [1, 109, 78, 8]
x2 = ["Low", "Medium", "High", "Critical"]
y2 = [4, 54, 21, 5]
x3 = ["Low", "Medium", "High", "Critical"]
y3 = [1, 8, 0, 0]



# Set the bar width
bar_width = 0.2

# Set the positions of the bars on the x-axis
r1 = np.arange(len(x1))
r2 = [x + bar_width*1 for x in r1]  # Shifted by one bar width
r3 = [x + bar_width*2 for x in r1]  # Shifted by two bar widths

# Create the bar plot
fig, ax = plt.subplots(figsize=(8, 5))
ax.bar(r1, y1, color='blue', width=bar_width, label='Chrome  (CVE=196)')
ax.bar(r2, y2, color='green', width=bar_width, label='FireFox (CVE=98)')
ax.bar(r3, y3, color='maroon', width=bar_width, label='Opera (CVE=9)')

# Add values to the bars
for i, v in enumerate(y1):
    ax.text(i, v, str(v), ha='center', color='black', fontweight='bold')
for i, v in enumerate(y2):
    ax.text(i + bar_width, v, str(v), ha='center', va='bottom', color='black', fontweight='bold')
for i, v in enumerate(y3):
    ax.text(i + bar_width*2, v, str(v), ha='center', va='bottom', color='black', fontweight='bold')

# Add x-axis labels, y-axis label, and title
ax.set_xlabel('Severity Level', fontweight='bold', fontsize=16)
ax.set_ylabel('Count', fontweight='bold', fontsize=16)
ax.set_title('CVSS  of Android Web-based Browsers', fontweight='bold', fontsize=16)

# Increase size of xtick and ytick labels and make them bold
ax.tick_params(axis='x', labelsize=14, )
ax.tick_params(axis='y', labelsize=14, )

ax.set_yticklabels([0,20,40,60,80, 100], fontweight='bold')

# Set the x-axis tick marks and labels
ax.set_xticks([r + bar_width*1.5 for r in range(len(x1))])
ax.set_xticklabels(x1, fontweight='bold')


# Add a legend and make it bold
ax.legend(fontsize=14, frameon=False, loc='upper right',  prop={'weight': 'bold'})


plt.savefig('02_Android_web_based.jpeg')


# Show the plot
plt.show()



"""# Calculate Weighted Average

## Weighted Average of CVSS scores 

Python script for calculating the weighted average of  CVSS scores with 4 ranges, each with a unique weight assigned:

1. In this script, we first define the ranges and their respective weights in a dictionary called ranges, where each key is a tuple representing the lower and upper bounds of the range, and each value is the weight assigned to that range.

2. We also define the  list of all cvss datasets.

3. Then, we loop through each number and each range using a nested for loop. If a number falls within a range, we multiply that number by the weight assigned to that range, and add the result to the weighted_sum variable.

4. After calculating the sum of the weights in weight_sum, we calculate the weighted average by dividing the weighted_sum by the weight_sum.
"""

# Android OS 10, 11, 12, 13
print("========= Android OS=======")
print("Android 10", len(df_new10))
print("Android 11", len(df_new11))
print("Android 12", len(df_new12))
print("Android 13", len(df_new13))
print("========= Web browser =======")
print("Chrome:", len(df_new_chrome))
print("Firefox:", len(df_new_firefox))
print("Opera:", len(df_new_opera))

def calculate_weighted_avg(numbers):
   
    weighted_sum = 0
    weight_used = 0
    ranges = {
    (0.1, 3.9): 0.1,
    (4.0, 6.9): 0.2,
    (7.0, 8.9): 0.9,
    (9.0, 10.0): 4.4
    }
    for num in numbers:
        for r in ranges:
            if num >= r[0] and num <= r[1]:
                weighted_sum += num * ranges[r]
                weight_used += ranges[r]
    weight_sum = weight_used
    weighted_avg = weighted_sum / weight_sum
    return round(weighted_avg, 2)

# Python program to get average of a list
def Average(lst):
    return round(sum(lst) / len(lst), 2)


def median(lst):
    """
    Returns the median of a list of numbers.
    """
    n = len(lst)
    sorted_lst = sorted(lst)
    if n % 2 == 0:
        # If the list has an even number of elements, average the middle two
        mid = n // 2
        return (sorted_lst[mid - 1] + sorted_lst[mid]) / 2
    else:
        # If the list has an odd number of elements, return the middle element
        return round(sorted_lst[n // 2], 2)

import math
len(df_new10) + len(df_new11) + len(df_new12)+ len(df_new13)

len(df_new_chrome) + len(df_new_firefox) + len(df_new_opera)



# Convert string elements to float
float_list10 = [float(x) for x in df_new10["Value"].tolist()]
float_list11 = [float(x) for x in df_new11["Value"].tolist()]
float_list11 =  [x for x in float_list11 if not math.isnan(x)]

float_list12 = [float(x) for x in df_new12["Value"].tolist()]
float_list13 = [float(x) for x in df_new13["Value"].tolist()]



print("Risk of Android 10: ", "Weighted_avg=",calculate_weighted_avg(float_list10) , "Mean=",Average(float_list10), "Medium=", median(float_list10) )
print("Risk of Android 11: ",  "Weighted_avg=", calculate_weighted_avg(float_list11)  , "Mean=",Average(float_list11), "Medium=", median(float_list11))
print("Risk of Android 12: ",  "Weighted_avg=", calculate_weighted_avg(float_list12)  , "Mean=",Average(float_list12), "Medium", median(float_list12))
print("Risk of Android 13: ",  "Weighted_avg=", calculate_weighted_avg(float_list13) , "Mean=",Average(float_list13), "Medium", median(float_list13))

float_list11[250:260]



float_list_chrome = [float(x) for x in df_new_chrome["Value"].tolist()]
float_list_firefox = [float(x) for x in df_new_firefox["Value"].tolist()]
float_list_opera = [float(x) for x in df_new_opera["Value"].tolist()]

print("Risk of Chrome: ", "Weighted_avg=",calculate_weighted_avg(float_list_chrome) , "Mean=",Average(float_list_chrome), "Medium=", median(float_list_chrome) )
print("Risk of FireFox: ",  "Weighted_avg=", calculate_weighted_avg(float_list_firefox)  , "Mean=",Average(float_list_firefox), "Medium=", median(float_list_firefox))
print("Risk of Opera: ",  "Weighted_avg=", calculate_weighted_avg(float_list_opera)  , "Mean=",Average(float_list_opera), "Medium", median(float_list_opera))

len()